// Generated by gencpp from file general_service_2022/the_way_out.msg
// DO NOT EDIT!


#ifndef GENERAL_SERVICE_2022_MESSAGE_THE_WAY_OUT_H
#define GENERAL_SERVICE_2022_MESSAGE_THE_WAY_OUT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace general_service_2022
{
template <class ContainerAllocator>
struct the_way_out_
{
  typedef the_way_out_<ContainerAllocator> Type;

  the_way_out_()
    : angle(0)
    , max_length(0.0)
    , the_angle_of_max_length(0)  {
    }
  the_way_out_(const ContainerAllocator& _alloc)
    : angle(0)
    , max_length(0.0)
    , the_angle_of_max_length(0)  {
  (void)_alloc;
    }



   typedef int32_t _angle_type;
  _angle_type angle;

   typedef double _max_length_type;
  _max_length_type max_length;

   typedef int32_t _the_angle_of_max_length_type;
  _the_angle_of_max_length_type the_angle_of_max_length;





  typedef boost::shared_ptr< ::general_service_2022::the_way_out_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::general_service_2022::the_way_out_<ContainerAllocator> const> ConstPtr;

}; // struct the_way_out_

typedef ::general_service_2022::the_way_out_<std::allocator<void> > the_way_out;

typedef boost::shared_ptr< ::general_service_2022::the_way_out > the_way_outPtr;
typedef boost::shared_ptr< ::general_service_2022::the_way_out const> the_way_outConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::general_service_2022::the_way_out_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::general_service_2022::the_way_out_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::general_service_2022::the_way_out_<ContainerAllocator1> & lhs, const ::general_service_2022::the_way_out_<ContainerAllocator2> & rhs)
{
  return lhs.angle == rhs.angle &&
    lhs.max_length == rhs.max_length &&
    lhs.the_angle_of_max_length == rhs.the_angle_of_max_length;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::general_service_2022::the_way_out_<ContainerAllocator1> & lhs, const ::general_service_2022::the_way_out_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace general_service_2022

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::general_service_2022::the_way_out_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::general_service_2022::the_way_out_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::general_service_2022::the_way_out_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::general_service_2022::the_way_out_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::general_service_2022::the_way_out_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::general_service_2022::the_way_out_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::general_service_2022::the_way_out_<ContainerAllocator> >
{
  static const char* value()
  {
    return "be349f47f00195efdd7bf46fc8b5963c";
  }

  static const char* value(const ::general_service_2022::the_way_out_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbe349f47f00195efULL;
  static const uint64_t static_value2 = 0xdd7bf46fc8b5963cULL;
};

template<class ContainerAllocator>
struct DataType< ::general_service_2022::the_way_out_<ContainerAllocator> >
{
  static const char* value()
  {
    return "general_service_2022/the_way_out";
  }

  static const char* value(const ::general_service_2022::the_way_out_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::general_service_2022::the_way_out_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 angle\n"
"float64 max_length\n"
"int32 the_angle_of_max_length\n"
;
  }

  static const char* value(const ::general_service_2022::the_way_out_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::general_service_2022::the_way_out_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.angle);
      stream.next(m.max_length);
      stream.next(m.the_angle_of_max_length);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct the_way_out_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::general_service_2022::the_way_out_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::general_service_2022::the_way_out_<ContainerAllocator>& v)
  {
    s << indent << "angle: ";
    Printer<int32_t>::stream(s, indent + "  ", v.angle);
    s << indent << "max_length: ";
    Printer<double>::stream(s, indent + "  ", v.max_length);
    s << indent << "the_angle_of_max_length: ";
    Printer<int32_t>::stream(s, indent + "  ", v.the_angle_of_max_length);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GENERAL_SERVICE_2022_MESSAGE_THE_WAY_OUT_H
